#ifndef BINARY_TREE_HPP
#define BINARY_TREE_HPP

// BinaryTree Node
struct BinaryNode{
    int value;
    BinaryNode* left;
    BinaryNode* right;
};

class BinaryTree{
    private:
        // Every tree has a 'root' node that is
        // initially set to nullptr when the tree is 
        BinaryNode* m_root;
        //private helpher function to help make insertion easier 
        void Insert(int value, BinaryNode* node); 
        //private helper function to help with search 
        bool Exists(int value, BinaryNode* node);
        //private helper function to enable printing
        void Print(BinaryNode* node); 
        //private helper function to remove node 
        void Remove(BinaryNode* &node, int value); 

        int FindReplacement(BinaryNode* node);

        // Private helper function, to help
        // make insertion easier.
        // TODO: You can optionally add any number of
        //       helper member functions that you need.
    public:
        // Constructor
        BinaryTree();
        // Destructor
        ~BinaryTree();
        // Copy Constructor
        BinaryTree(const BinaryTree& copy);
        // Copy Assignment Constructor
        BinaryTree& operator=(const BinaryTree& rhs);
        // Insert a value into the binary tree
        void Insert(int value);
        // Check if a value exists in the tree and returns true or false
        bool Exists(int value);
        // Prints the tree doing an in-order traversal
        void Print();
        // Removes a node from the tree
        void Remove(int value);
        // Returns the sum of all of the nodes
        // This can be generated by traversing the tree
        // or creating additional storage
        void destroy_tree(BinaryNode* node);
        //destructor 
        //copy constructor 
        //reuse member function by calling 'destroy_tree' in
        //destructor 

        void copyHelper(BinaryNode*  thisNode, BinaryNode*  sourceNode);


        int Sum(); 

        int Sum(BinaryNode* node); 
};



#endif
